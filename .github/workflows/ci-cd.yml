name: CI/CD

on:
  push:
    branches: ["**"]
    tags: ["*"]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository }}
  RUN_ID: ${{ github.run_id }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      IMAGE_LC: ${{ steps.vars.outputs.image_lc }}
      SAFE_TAG: ${{ steps.vars.outputs.safe_tag }}
      IS_MAIN:  ${{ steps.vars.outputs.is_main }}
      IS_TAG:   ${{ steps.vars.outputs.is_tag }}
    steps:
      - name: Compute vars (lowercase image + safe tag)
        id: vars
        shell: bash
        run: |
          IMAGE_LC="${IMAGE,,}"

          ref="${GITHUB_REF_NAME}"
          safe="$(printf '%s' "$ref" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._-]+/-/g' | sed -E 's/^-+|-+$//g' | cut -c1-120)"
          safe="${safe:-build}"

          echo "image_lc=$IMAGE_LC" >> "$GITHUB_OUTPUT"
          echo "safe_tag=$safe"      >> "$GITHUB_OUTPUT"

          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then echo "is_main=true" >> "$GITHUB_OUTPUT"; else echo "is_main=false" >> "$GITHUB_OUTPUT"; fi
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then echo "is_tag=true" >> "$GITHUB_OUTPUT"; else echo "is_tag=false" >> "$GITHUB_OUTPUT"; fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          pull: true
          provenance: false
          sbom: false
          tags: |
            ${{ needs.prepare.outputs.IMAGE_LC }}:${{ env.RUN_ID }}-${{ needs.prepare.outputs.SAFE_TAG }}
          cache-from: type=registry,ref=${{ needs.prepare.outputs.IMAGE_LC }}:cache
          cache-to: type=registry,mode=max,ref=${{ needs.prepare.outputs.IMAGE_LC }}:cache

      - name: Tag & Push latest (main only)
        if: needs.prepare.outputs.IS_MAIN == 'true'
        run: |
          docker buildx imagetools create \
            -t "${{ needs.prepare.outputs.IMAGE_LC }}:latest" \
            "${{ needs.prepare.outputs.IMAGE_LC }}:${{ env.RUN_ID }}-${{ needs.prepare.outputs.SAFE_TAG }}"

      - name: Tag & Push SAFE_TAG (tags or main)
        if: needs.prepare.outputs.IS_MAIN == 'true' || needs.prepare.outputs.IS_TAG == 'true'
        run: |
          docker buildx imagetools create \
            -t "${{ needs.prepare.outputs.IMAGE_LC }}:${{ needs.prepare.outputs.SAFE_TAG }}" \
            "${{ needs.prepare.outputs.IMAGE_LC }}:${{ env.RUN_ID }}-${{ needs.prepare.outputs.SAFE_TAG }}"

  lint:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Lint (flake8 inside compose)
        run: docker compose -p "${RUN_ID}" -f docker-compose.ci.yml run --rm backend flake8 .
      - name: Down compose (best-effort)
        run: docker compose -p "${RUN_ID}" -f docker-compose.ci.yml down --remove-orphans || true

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push, lint]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Prepare remote dir
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
        run: ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" "mkdir -p /home/$DO_USER/app"

      - name: Upload compose file
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
        run: scp -o StrictHostKeyChecking=no docker-compose.deploy.yml "$DO_USER@$DO_HOST:/home/$DO_USER/app/docker-compose.deploy.yml"

      - name: (Optional) GHCR login on droplet if private
        env:
          DO_USER:    ${{ secrets.DO_USER }}
          DO_HOST:    ${{ secrets.DO_HOST }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_USER:  ${{ secrets.GHCR_USER }}
        run: |
          if [ -n "${GHCR_TOKEN}" ] && [ -n "${GHCR_USER}" ]; then
            ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" \
              "echo '${GHCR_TOKEN}' | docker login ghcr.io -u '${GHCR_USER}' --password-stdin || true"
          else
            echo "GHCR creds not set; skipping login."
          fi

      - name: Remote deploy
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
          IMAGE_LC: ${{ needs.prepare.outputs.IMAGE_LC }}
          SAFE_TAG: ${{ needs.prepare.outputs.SAFE_TAG }}
        run: |
          ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" << 'EOF'
            set -e
            cd /home/${DO_USER}/app
           
            docker compose -f docker-compose.deploy.yml pull
            docker compose -f docker-compose.deploy.yml down --remove-orphans
            docker volume rm nomi-lang_main_build || true
            docker volume rm nomi-lang_cookbook_build || true
            docker compose -f docker-compose.deploy.yml up -d
          EOF