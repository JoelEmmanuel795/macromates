name: CI/CD

on:
  push:
    branches: ["**"]
    tags: ["*"]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository }}
  GITHUB_REF_NAME: ${{ github.ref_name }}
  RUN_ID: ${{ github.run_id }}

jobs:
  pull:
    runs-on: ubuntu-latest
    steps:
      - name: Docker login (GHCR)
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Compute IMAGE_LC
        run: echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Pull latest (allow failure)
        run: docker pull $IMAGE_LC:latest
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: pull
    steps:
      - uses: actions/checkout@v4
      - name: Before script
        run: |
          chmod -R u+w .
          find . -type d -name "__pycache__" -exec rm -rf {} +
      - name: Docker login (GHCR)
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Compute tags and IMAGE_LC
        run: |
          SAFE_TAG="${GITHUB_REF_NAME//\//-}"
          echo "SAFE_TAG=$SAFE_TAG" >> $GITHUB_ENV
          echo "SAFE_TAG=$SAFE_TAG" > .env
          echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build image
        run: docker build --tag "$IMAGE_LC:${RUN_ID}-${SAFE_TAG}" --cache-from "$IMAGE_LC:latest" .

  lint:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Docker login (GHCR)
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Recompute env
        run: |
          SAFE_TAG="${GITHUB_REF_NAME//\//-}"
          echo "SAFE_TAG=$SAFE_TAG" > .env
          echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Lint (flake8 inside compose)
        run: docker compose -p "${RUN_ID}" -f docker-compose.ci.yml run backend flake8 .

  push_latest:
    runs-on: ubuntu-latest
    needs: [build, lint]
    steps:
      - name: Docker login (GHCR)
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Compute IMAGE_LC and SAFE_TAG
        run: |
          echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "SAFE_TAG=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV
      - name: Tag & Push :latest
        run: |
          docker tag "$IMAGE_LC:${RUN_ID}-${SAFE_TAG}" "$IMAGE_LC:latest"
          docker push "$IMAGE_LC:latest"

  push_tag:
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Docker login (GHCR)
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Compute IMAGE_LC and SAFE_TAG
        run: |
          echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "SAFE_TAG=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV
      - name: Tag & Push :SAFE_TAG
        run: |
          docker tag "$IMAGE_LC:${RUN_ID}-${SAFE_TAG}" "$IMAGE_LC:${SAFE_TAG}"
          docker push "$IMAGE_LC:${SAFE_TAG}"

  cleanup:
    runs-on: ubuntu-latest
    needs: [push_latest, push_tag]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Compute IMAGE_LC and SAFE_TAG
        run: |
          echo "IMAGE_LC=$(echo '${IMAGE}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "SAFE_TAG=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV
          echo "SAFE_TAG=$SAFE_TAG" > .env
      - name: Cleanup local artifacts
        run: |
          docker rmi -f "$IMAGE_LC:${RUN_ID}-${SAFE_TAG}" || true
          docker compose -p "${RUN_ID}" -f docker-compose.ci.yml down --remove-orphans || true

  deploy:
    runs-on: ubuntu-latest
    needs: [push_latest, push_tag, cleanup]
    # ידני בלבד ועל main (כמו GitLab)
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Prepare remote dir
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
        run: ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" "mkdir -p /home/$DO_USER/app"

      - name: Upload compose file
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
        run: scp -o StrictHostKeyChecking=no docker-compose.deploy.yml "$DO_USER@$DO_HOST:/home/$DO_USER/app/docker-compose.deploy.yml"

      # כניסה ל-GHCR על השרת רק אם הוגדרו קרדנצ'לים
      - name: (Optional) GHCR login on droplet if private
        env:
          DO_USER:    ${{ secrets.DO_USER }}
          DO_HOST:    ${{ secrets.DO_HOST }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_USER:  ${{ secrets.GHCR_USER }}
        run: |
          if [ -n "${GHCR_TOKEN}" ] && [ -n "${GHCR_USER}" ]; then
            ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" \
              "echo '${GHCR_TOKEN}' | docker login ghcr.io -u '${GHCR_USER}' --password-stdin || true"
          else
            echo "GHCR creds not set; skipping login."
          fi

      - name: Remote deploy
        env:
          DO_USER: ${{ secrets.DO_USER }}
          DO_HOST: ${{ secrets.DO_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no "$DO_USER@$DO_HOST" << 'EOF'
            set -e
            cd /home/${DO_USER}/app
            docker compose -f docker-compose.deploy.yml pull
            docker compose -f docker-compose.deploy.yml down --remove-orphans
            docker volume rm nomi-lang_main_build || true
            docker volume rm nomi-lang_cookbook_build || true
            docker compose -f docker-compose.deploy.yml up -d
          EOF